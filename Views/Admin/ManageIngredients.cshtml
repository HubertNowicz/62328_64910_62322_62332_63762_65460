@model AdminIngredientsViewModel
@{
    ViewData["Title"] = "Zarządzaj Składnikami";
}
<div id="message-container"></div>

<div class="container mb-4">
    <a href="@Url.Action("Index", "Admin")" class="btn btn-secondary">
        ← Powrót
    </a>
</div>

<div class="card shadow-sm mb-4">
    <div class="card-header">
        <h5 class="mb-0">Dodaj składnik</h5>
    </div>
    <div class="card-body">
        <div class="form-group mb-3">
            <label for="ingredientName">Nazwa</label>
            <input type="text" class="form-control rounded shadow-sm" id="ingredientName" name="ingredientName" required />
        </div>
        <div class="form-group mb-3">
            <label for="unitSelect">Wybierz miare</label>
            <div id="unitSelect" class="form-control" style="max-height: 200px; overflow-y: auto;">
                @foreach (var unit in Model.AllUnits)
                {
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" name="unitIds" value="@unit.Id" id="unit-@unit.Id">
                        <label class="form-check-label" for="unit-@unit.Id">@unit.Name</label>
                    </div>
                }
            </div>
            <small class="text-muted">Select multiple units by checking the boxes.</small>
        </div>
        <button type="button" class="btn btn-success" onclick="addIngredient()">Dodaj składnik</button>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card shadow-sm mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Existing Ingredients</h5>
            </div>
            <div class="card-body">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="searchExisting" placeholder="Szukaj składnika..." onkeyup="filterTable('searchExisting', 'existingTable')" />
                    <button class="btn btn-outline-secondary" type="button" onclick="clearSearch('searchExisting', 'existingTable')">Clear</button>
                </div>
                <div class="table-responsive">
                    <table class="table table-striped mb-0" id="existingTable">
                        <thead class="table-light">
                            <tr>
                                <th>Name</th>
                                <th>Units</th>
                                <th style="width: 100px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ingredient in Model.Ingredients)
                            {
                                <tr id="ingredient-row-@ingredient.Id">
                                    <td>@ingredient.Name</td>
                                    <td>@string.Join(", ", ingredient.Units.Select(u => u.Name))</td>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-sm" onclick="deleteIngredient(@ingredient.Id)">Usuń</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card shadow-sm mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Pending Ingredients</h5>
            </div>
            <div class="card-body">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="searchPending" placeholder="Search składnika.." onkeyup="filterTable('searchPending', 'pendingTable')" />
                    <button class="btn btn-outline-secondary" type="button" onclick="clearSearch('searchPending', 'pendingTable')">Clear</button>
                </div>
                <div class="table-responsive">
                    <table class="table table-striped mb-0" id="pendingTable">
                        <thead class="table-light">
                            <tr>
                                <th>Name</th>
                                <th>Suggested At</th>
                                <th>Suggested By</th>
                                <th colspan="2">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var suggestion in Model.PendingIngredients)
                            {
                                <tr id="pending-row-@suggestion.SuggestedByUser">
                                    <td>@suggestion.Name</td>
                                    <td>@suggestion.SuggestedAt.ToString("g")</td>
                                    <td>@($"{suggestion.SuggestedByUser.FirstName} {suggestion.SuggestedByUser.Surname}")</td>
                                    <td>@suggestion.MeasurementUnit?.Name</td>
                                    <td>
                                        <button type="button" class="btn btn-success btn-sm" onclick="approveSuggestion(@suggestion.Id)">Zaakceptuj</button>
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-sm" onclick="rejectSuggestion(@suggestion.Id)">Odrzuć</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function showMessage(type, text) {
            const container = document.getElementById("message-container");
            container.innerHTML = `<div class="alert alert-${type}">${text}</div>`;
            setTimeout(() => { container.innerHTML = ""; }, 5000);
        }

        function deleteIngredient(id) {
            fetch('/Admin/DeleteIngredient', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `id=${id}`
            })
                .then(async response => {
                    const data = await response.json();
                    if (response.ok) {
                        document.getElementById(`ingredient-row-${id}`).remove();
                        showMessage("success", data.message);
                    } else {
                        showMessage("danger", data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage("danger", "An unexpected error occurred.");
                });
        }

        function approveSuggestion(id) {
            fetch('/Admin/ApproveSuggestion', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `id=${id}`
            })
                .then(async response => {
                    const data = await response.json();
                    if (response.ok) {
                        document.getElementById(`pending-row-${id}`).remove();
                        showMessage("success", data.message);
                    } else {
                        showMessage("danger", data.message);
                    }
                })
                .catch(error => {
                    location.reload();
                    console.error('Fetch error:', error);
                    showMessage("danger", "An unexpected error occurred.");
                    document.getElementById(`pending-row-${id}`).remove();
                    location.reload();
                });
        }

        function rejectSuggestion(id) {
            fetch('/Admin/RejectSuggestion', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `id=${id}`
            })
                .then(async response => {
                    const data = await response.json();
                    if (response.ok) {
                        document.getElementById(`pending-row-${id}`).remove();
                        showMessage("success", data.message);
                    } else {
                        showMessage("danger", data.message);
                    }
                })
                .catch(error => {
                    location.reload();
                    console.error('Fetch error:', error);
                    showMessage("danger", "An unexpected error occurred.");
                    document.getElementById(`pending-row-${id}`).remove();
                });
        }

        function filterTable(inputId, tableId) {
            const filter = document.getElementById(inputId).value.toLowerCase();
            const rows = document.querySelectorAll(`#${tableId} tbody tr`);
            rows.forEach(row => {
                const text = row.innerText.toLowerCase();
                row.style.display = text.includes(filter) ? "" : "none";
            });
        }

        function clearSearch(inputId, tableId) {
            document.getElementById(inputId).value = "";
            filterTable(inputId, tableId);
        }

        function addIngredient() {
            const name = document.getElementById("ingredientName").value.trim();
            const unitSelect = document.querySelectorAll('input[name="unitIds"]:checked');
            const selectedUnitIds = Array.from(unitSelect).map(opt => opt.value);

            if (!name) {
                showMessage("danger", "Please enter an ingredient name.");
                return;
            }

            if (selectedUnitIds.length === 0) {
                showMessage("danger", "Please select at least one unit.");
                return;
            }

            const formData = new URLSearchParams();
            formData.append("ingredientName", name);
            selectedUnitIds.forEach(id => formData.append("unitIds", id));

            fetch('/Admin/AddIngredient', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: formData.toString()
            })
                .then(async response => {
                    const data = await response.json();
                    if (response.ok) {
                        showMessage("success", data.message);
                        document.getElementById("ingredientName").value = "";
                        location.reload();
                    } else {
                        showMessage("danger", data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage("danger", "An unexpected error occurred.");
                });
        }

    </script>
}


<!--
Note: CSRF (Cross-Site Request Forgery) protection has been temporarily removed for simplicity.
1. Including the AntiForgeryToken in the form and request headers.
2. Validating the token on the server side for each request that modifies data.
To implement CSRF protection:
- Use @Html.AntiForgeryToken() in forms.
- Validate it using the [ValidateAntiForgeryToken] attribute on your controller actions.
-->
